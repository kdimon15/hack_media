import streamlit as st
import pandas as pd
import numpy as np
import catboost
from utils import read_file, create_features, create_illness_features, create_features_for_shap
from sklearn.inspection import permutation_importance
from sklearn.metrics import classification_report, confusion_matrix
from golden_features import cols_le
import shap
import seaborn as sns
import matplotlib.pyplot as plt
from streamlit_shap import st_shap
from catboost import Pool, CatBoostRegressor
import plotly.graph_objects as go
import plotly.express as px
import json
from scipy import stats
from phik.report import plot_correlation_matrix
from phik import report
import plotly.figure_factory as ff
import pickle


cat_fts = []

def reset():
    st.session_state.key += 1

def get_shap_df(cur_df):
    return cur_df


@st.cache_resource(show_spinner=True)
def get_shap_values(cur_df, feature_names):
    explainer = shap.TreeExplainer(model)
    test_pool = Pool(cur_df[feature_names].fillna(0), cur_df[target_col])
    shap_values = explainer.shap_values(test_pool)
    print(shap_values)
    return shap_values, explainer


@st.cache_resource(show_spinner=True)
def get_preds(df):
    max_id = df[df['target_1'].notna()].index.max()
    # print(df.iloc[max_id])
    preds = [df.iloc[max_id][target_col] * cb_model.predict(df[cb_model.feature_names_].iloc[max_id+1]) for cb_model in all_models]
    sample_submission = pd.DataFrame({
    'week': ['04.09.2023', '11.09.2023', '18.09.2023', '25.09.2023', '02.10.2023', '09.10.2023', '16.10.2023', '23.10.2023', '30.10.2023', '06.11.2023', '13.11.2023', '20.11.2023', '27.11.2023', '04.12.2023', '11.12.2023', '18.12.2023', '25.12.2023', '01.01.2024', '08.01.2024', '15.01.2024', '22.01.2024', '29.01.2024', '05.02.2024', '12.02.2024', '19.02.2024', '26.02.2024', '04.03.2024', '11.03.2024', '18.03.2024'],
    'revenue': preds
    })
    return sample_submission

numeric_cols = ['–î–æ –ø–æ—Å—Ç–∞–≤–∫–∏',
                '–ù–†–ü',
                '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                '–°—É–º–º–∞',
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π',
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ 7',
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ 15',
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ 30',
                '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ 1',
                '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ 2',
                '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ 3',
                '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å—Ç–∞–≤–∫–∏ 7',
                '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å—Ç–∞–≤–∫–∏ 15',
                '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å—Ç–∞–≤–∫–∏ 30',
                '–û—Ç–º–µ–Ω–∞ –ø–æ–ª–Ω–æ–≥–æ –¥–µ–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ –∑–∞–∫—É–ø–∫—É',
                '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ –Ω–∞ –∑–∞–∫—É–ø–∫—É: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ –±—É–º–∞–≥–µ',
                '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ –Ω–∞ –∑–∞–∫—É–ø–∫—É: –¥–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏',
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è',
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–π']

# def sum_plot_chosen_columns(shap_values, df, columns):
#     # –ø–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫
#     idxs = [df.drop(target_col, axis=1).columns.get_loc(x) for x in columns]
#     assert len(idxs) != 1

#     # –ø–æ–ª—É—á–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–ª–æ–Ω–æ–∫
#     return st_shap(shap.summary_plot(shap_values[:, idxs], shap_df.drop(target_col, axis=1)[columns]))


# def plot_failures_over_time(data, column, value):
#     # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–µ—Å—è—Ü–∞–º –∏ –ø–æ–¥—Å—á–µ—Ç —Å—Ä—ã–≤–æ–≤ –ø–æ—Å—Ç–∞–≤–æ–∫
#     monthly_failures = data[data[column]==value].groupby('–ú–µ—Å—è—Ü1')[target_col].sum()
#     for i in range(1, 13):
#         if i not in monthly_failures.index:
#             monthly_failures[i] = 0

#     fig = px.line(monthly_failures, x=range(1, 13), y=target_col, title=f'–î–∏–Ω–∞–º–∏–∫–∞ —Å—Ä—ã–≤–æ–≤ –ø–æ—Å—Ç–∞–≤–æ–∫ –ø–æ –º–µ—Å—è—Ü–∞–º —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º {value} –∫–æ–ª–æ–Ω–∫–∏ {column}')
#     fig.update_traces(mode='markers+lines')
#     fig.update_xaxes(title='–ú–µ—Å—è—Ü')
#     fig.update_yaxes(title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä—ã–≤–æ–≤ –ø–æ—Å—Ç–∞–≤–æ–∫')
#     return fig


def get_filtered_samples(df, dictionary):
    # –ø–æ–ª—É—á–∞–µ–º –∏–∑ df —Å—ç–º–ø–ª—ã —Å —Ç–∞–∫–∏–º–∏ –∂–µ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –∫–∞–∫ –≤ dict {'–ü–æ—Å—Ç–∞–≤—â–∏–∫':1}
    query_str = ' and '.join([f"`{key}` == {val}" for key, val in dictionary.items()])
    return df.query(query_str)

st.set_page_config(layout="wide")
st.title('–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ üìä')

if 'key' not in st.session_state:
    st.session_state.key = 0
if 'clicked' not in st.session_state:
    st.session_state.clicked = False
if 'clicked1' not in st.session_state:
    st.session_state.clicked1 = False
if 'clicked2' not in st.session_state:
    st.session_state.clicked2 = False



with st.expander("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞"):
    st.write('')

    file = st.file_uploader(label='–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞', accept_multiple_files=False, type=['xlsx'])
    if file is not None:
        uploaded_df = read_file(file)
        extra_df = uploaded_df.copy(deep=True)
        st.session_state.clicked1 = st.button('–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑ ', type='primary', use_container_width=True)


# with st.expander("–†—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö"):
#     st.write('')

#     df = pd.read_csv('analytics/inp_template.csv')
#     edited_df = st.data_editor(df, num_rows='dynamic', hide_index=True, use_container_width=True, key=f'editor_{st.session_state.key}')

#     col1, col2 = st.columns(2)
#     col1.button('–û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É', on_click=reset, type='secondary', use_container_width=True)
#     st.session_state.clicked2 = col2.button('–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑', type='primary', use_container_width=True)

#     if st.session_state.clicked2:
#         uploaded_df = edited_df

with st.expander("–î–æ—Å—Ç—É–ø –ø–æ API"):
    st.write('')

    st.markdown(
        """
            **–®–∞–≥ 1: –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ API –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è** \n
            –ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API, —É–¥–æ—Å—Ç–æ–≤–µ—Ä—å—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ,
            —Ç–∞–∫–∏–µ –∫–∞–∫ –∫–ª—é—á API, —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å. –ï—Å–ª–∏ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ –∏—Ö –≤ –≤–∞—à–µ–º –∫–æ–¥–µ.

            **–®–∞–≥ 2: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–ª–∏ –º–æ–¥—É–ª–∏** \n
            –ï—Å–ª–∏ –≤–∞—à —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫, —É–±–µ–¥–∏—Ç–µ—Å—å,
            —á—Ç–æ –≤—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —Ä–∞–±–æ—Ç—ã —Å JSON.
            –ù–∞–ø—Ä–∏–º–µ—Ä, –≤ Python –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É requests.  
                
            """
                )
    
    st.code("""import requests""", language='python')
    
    st.markdown(
        """
            **–®–∞–≥ 3: –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON** \n
            –°–æ–∑–¥–∞–π—Ç–µ JSON-–æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
            
            **–®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤—å—Ç–µ HTTP-–∑–∞–ø—Ä–æ—Å –∫ API** \n
            –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–º–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ HTTP-–∑–∞–ø—Ä–æ—Å–∞ –∫ API. –£–∫–∞–∂–∏—Ç–µ URL –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏ API –∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
            –í–æ—Ç –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ requests –≤ Python:
            """
                )
    
    st.code('''
            data = {
                "–∫–ª—é—á1": "–∑–Ω–∞—á–µ–Ω–∏–µ1",
                "–∫–ª—é—á2": "–∑–Ω–∞—á–µ–Ω–∏–µ2"
                }
                
            url = "https://api.severstal-analytics.com/get_preds"  
            headers = {
                "Content-Type": "application/json",
                "Authorization": "–≤–∞—à_—Ç–æ–∫–µ–Ω_–¥–æ—Å—Ç—É–ø–∞"
            }

            response = requests.post(url, json=data, headers=headers)

            # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ –æ—Ç–≤–µ—Ç–∞
            if response.status_code == 200:
                # –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
                response_data = response.json()
                print(response_data)
            else:
                # –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ –Ω–µ 200
                print(f"–û—à–∏–±–∫–∞: {response.status_code}")
                print(response.text)
''', language='python')
    
    st.markdown(
        """
            **–®–∞–≥ 5: –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞** \n
            –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞, –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞. 
            –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –∏–∑–≤–ª–µ–∫–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ JSON –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É.
            """
                )

with st.spinner('–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å...'):
    all_models = pickle.load(open('models.pkl', 'rb'))
    model = all_models[0]
    target_col = '–ø—Ä–æ–¥–∞–∂–∏'
    used_columns = model.feature_names_ + [target_col]


if st.session_state.clicked1 or st.session_state.clicked2 or st.session_state.clicked:
    st.session_state.clicked = True
    tab1, tab2 = st.tabs(['–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂', '–ê–Ω–∞–ª–∏–∑ –∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç–∏ –∏ —Ä–µ–∫–ª–∞–º—ã'])

    # prediction_df –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–æ–¥–∞–∂
    prediction_df = create_features(uploaded_df).reset_index(drop=True)

    with tab1:

        preds = get_preds(prediction_df)

        alternative_df = pd.read_excel(file, header=[4, 5])
        alternative_df.columns = [f'{i[0]}_{i[1]}'.replace('\n', '') for i in alternative_df.columns]
        alternative_df.columns = ['–≥–æ–¥', '–Ω–µ–¥–µ–ª—è', '–º–µ—Å—è—Ü', '–ø—Ä–æ–¥–∞–∂–∏'] + alternative_df.columns.to_list()[4:]
        st.dataframe(alternative_df, height=200)
        # st.dataframe(preds, height=200)
        st.download_button('–°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏', data=preds.to_csv(index=False).encode("utf-8"), type='secondary', use_container_width=True, file_name='predicted_sales.csv')


        model = CatBoostRegressor()
        model.load_model('info_model.cbm')

        df = create_features_for_shap(uploaded_df).reset_index(drop=True)
        df = df[df['–ø—Ä–æ–¥–∞–∂–∏'].notna()].dropna()
        shap_df = get_shap_df(df)
        shap_values, explainer = get_shap_values(df, model.feature_names_)
        feature_names = df.drop(target_col, axis=1).columns
        # feature_names = [cols_le[x] for x in feature_names]

        st.markdown("### üìö –ö–∞–∫ —á–∏—Ç–∞—Ç—å —ç—Ç–∏ –≥—Ä–∞—Ñ–∏–∫–∏?")

        col1, col2 = st.columns(2)

        col1.markdown("""* –ó–Ω–∞—á–µ–Ω–∏—è —Å–ª–µ–≤–∞ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ ‚Äî —ç—Ç–æ **negative** –∫–ª–∞—Å—Å, —Å–ø—Ä–∞–≤–∞ ‚Äî **positive** \n* –ß–µ–º —Ç–æ–ª—â–µ –ª–∏–Ω–∏—è –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ, —Ç–µ–º –±–æ–ª—å—à–µ —Ç–∞–∫–∏—Ö —Ç–æ—á–µ–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è. \n* –ß–µ–º –∫—Ä–∞—Å–Ω–µ–µ —Ç–æ—á–∫–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ, —Ç–µ–º –≤—ã—à–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏—á–∏ –≤ –Ω–µ–π.""")
        col2.markdown("""* –ì—Ä–∞—Ñ–∏–∫ –ø–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂ –∏ –≤ –∫–∞–∫—É—é —Å—Ç–æ—Ä–æ–Ω—É ‚Äì –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é. \n* –î–ª–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–∞ - —ç—Ç–æ –≤–µ–ª–∏—á–∏–Ω–∞ –≤–∫–ª–∞–¥–∞ —ç—Ç–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞. –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ñ–∞–∫—Ç–æ—Ä —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ, –∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è - —É–º–µ–Ω—å—à–∞–µ—Ç. \n* –ü—Ä–∏–∑–Ω–∞–∫–∏ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ.""")

        # –¥–∞–ª—å—à–µ –≤—ã–≤–æ–¥–∏–º —Ä–∞–∑–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º shap values (–º–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å height –∏ width –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –≤ st_shap)
        col1, col2 = st.columns(2)

        with col1:
            st_shap(shap.summary_plot(shap_values, shap_df.drop(target_col, axis=1).to_numpy(), max_display=10, feature_names=feature_names), height=500)

        with col2:
            st_shap(shap.plots._waterfall.waterfall_legacy(explainer.expected_value, shap_values[0], feature_names=feature_names), height=500)

        st.write('')
        st.write('')
        st.markdown("""###### –í–ª–∏—è–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂ - –¥–ª–∏–Ω–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–Ω–∏—Ö —Å—Ç—Ä–µ–ª–æ–∫ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂, –∫—Ä–∞—Å–Ω—ã–µ —É–º–µ–Ω—å—à–∞—é—Ç.""")

        st_shap(shap.force_plot(explainer.expected_value, shap_values[0,:],
                shap_df.drop(target_col, axis=1).iloc[0,:], feature_names=feature_names))

        st.divider()

        col1, col2 = st.columns(2)

        with col1:

            fig, ax = plt.subplots()  # —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã figure –∏ axes
            perm_importance = permutation_importance(model, shap_df.drop(target_col, axis=1).to_numpy(), shap_df[target_col], n_repeats=5, random_state=42)
            sorted_idx = perm_importance.importances_mean.argsort()[-10:]
            print(perm_importance)

            try:
                data = np.array(perm_importance.importances_mean[sorted_idx])
                if (data <= 0).any():
                    data += 1e-6
                imp = stats.boxcox(data)[0]
            except:
                imp = np.array(perm_importance.importances_mean[sorted_idx])
            theta = np.array(shap_df.drop(target_col, axis=1).columns)[sorted_idx]

            # print(perm_importance.importances_mean[sorted_idx])
            fig = go.Figure(data=go.Scatterpolar(r=[imp[x] for x in range(len(imp)-1, -1, -1)], theta=[theta[x] for x in range(len(imp)-1, -1, -1)]))
            fig.update_traces(fill='toself')
            fig.update_layout(polar = dict(
                              radialaxis_angle = -45,
                              angularaxis = dict(
                              direction = "clockwise",
                              period = 6)
                              ))

            fig.update_layout(title_text="–¢–æ–ø 10 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.")
            st.plotly_chart(fig, use_container_width=True)

            st.markdown('###### –ì—Ä–∞—Ñ–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ—á–Ω–æ–π –≤–∞–∂–Ω–æ—Å—Ç–∏ (permutation importance) –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤. \n* –ß–µ–º –≤—ã—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏, —Ç–µ–º –±–æ–ª–µ–µ –≤–∞–∂–Ω—ã–º —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–∑–Ω–∞–∫ –¥–ª—è –º–æ–¥–µ–ª–∏. \n* –ï—Å–ª–∏ –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∞ –±–ª–∏–∑–∫–∞ –∫ –Ω—É–ª—é –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞, —ç—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ç–æ, —á—Ç–æ –¥–∞–Ω–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫ —Å–ª–∞–±–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –º–æ–¥–µ–ª—å.')

        with col2:
            st.markdown("""###### –ì—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤ —Ä–∞–∑—Ä–µ–∑–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞ –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–π. \n* **–û—Å—å X**: –ó–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–∞. \n* **–û—Å—å Y**: –í–∞–∂–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–∏. –ß–µ–º –≤—ã—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–∏ Y, —Ç–µ–º –±–æ–ª–µ–µ –≤–∞–∂–Ω—ã–º —è–≤–ª—è–µ—Ç—Å—è –¥–∞–Ω–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫ –¥–ª—è –º–æ–¥–µ–ª–∏.""")

            column_to_plot = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:', model.feature_names_)
            st_shap(shap.dependence_plot(column_to_plot, shap_values, shap_df.drop(target_col, axis=1), feature_names=feature_names), height=400)

        st.divider()

        st.markdown('**–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞** - —ç—Ç–æ —Ç–∞–±–ª–∏—Ü–∞, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∞—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –≤ –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö. –ö–∞–∂–¥–∞—è —è—á–µ–π–∫–∞ –≤ –º–∞—Ç—Ä–∏—Ü–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–º–µ—Ä—è–µ—Ç —Å–∏–ª—É –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –¥–≤—É–º—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏. –ó–Ω–∞—á–µ–Ω–∏—è –±–ª–∏–∂–µ –∫ 1 —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Å–∏–ª—å–Ω—É—é –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é, –æ–∫–æ–ª–æ 0 —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Å–ª–∞–±—É—é –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é. –ê–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç—Ä–∏—Ü—ã –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –≤–∑–∞–∏–º–æ—Å–≤—è–∑–µ–π –º–µ–∂–¥—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏ –æ—Ü–µ–Ω–∫–∏ –∏—Ö –≤–ª–∏—è–Ω–∏—è –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞, —á—Ç–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è.')

        phk_df = shap_df.copy()
        phk_df[target_col] = model.predict(shap_df)
        phik_overview = phk_df.phik_matrix(interval_cols=[i for i in phk_df.columns if i != target_col]).round(3).sort_values(target_col)

        data = phik_overview.values
        columns = [cols_le.get(x, x) for x in phik_overview.columns]
        index = [cols_le.get(x, x) for x in phik_overview.index]

        fig = px.imshow(data, x=columns, y=index)

        fig.update_layout(xaxis_title="", yaxis_title="", height=800)

        fig.update_xaxes(tickfont=dict(size=12), tickangle=45)
        fig.update_yaxes(tickfont=dict(size=12))

        st.plotly_chart(fig, use_container_width=True)

        st.divider()

        # st.button(f'–°–∫–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –≤ PDF', type='primary', use_container_width=True)

        st.divider()



# history
# --------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------

    with tab2: 
        st.divider()

        st.dataframe(alternative_df, height=200)

        st.divider()

        st.markdown('##### –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏')

        col1, col2 = st.columns(2)

        with col1:
            plt.figure(figsize=(8, 5))
            prev = alternative_df[alternative_df['–ø—Ä–æ–¥–∞–∂–∏'].notna()]['–ø—Ä–æ–¥–∞–∂–∏'].tolist()[-80:]
            new_preds = preds['revenue'].to_list()
            x_plot = len(prev) + len(new_preds)
            y_plot = prev + new_preds
            plt.plot(list(range(len(prev))), prev, color='blue', label='–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏')
            plt.plot(list(range(len(prev), x_plot)), new_preds, color='red', label='–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏')
            plt.xlabel('–î–Ω–∏')
            plt.ylabel('–ü—Ä–æ–¥–∞–∂–∏')
            plt.title('–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂')
            plt.legend()
            st.pyplot(plt)

        with col2:
            illness_models = pickle.load(open('models_bolezn.pkl', 'rb'))
            ilness_df = create_illness_features(extra_df).reset_index(drop=True)
            max_id = ilness_df[ilness_df['target_1'].notna()].index.max()
            new_preds = [ilness_df.iloc[max_id]['–∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç—å'] * model.predict(ilness_df[illness_models[0].feature_names_].iloc[max_id+1]) for model in illness_models]
            plt.figure(figsize=(8, 5))
            prev = ilness_df[ilness_df['–∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç—å'].notna()]['–∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç—å'].tolist()

            plt.plot(prev + new_preds)
            plt.plot(prev)
            plt.figure(figsize=(8, 5))
            x_plot = len(prev) + len(new_preds)
            y_plot = prev + new_preds
            plt.plot(list(range(len(prev))), prev, color='blue', label='–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è')
            plt.plot(list(range(len(prev), x_plot)), new_preds, color='red', label='–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è')
            plt.scatter([36, 88, 140, 192], [prev[x] for x in [36, 88, 140, 192]], color='red', marker='o', label='–ò–¥–µ–∞–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ä–µ–∫–ª–∞–º—ã')
            plt.xlabel('–î–Ω–∏')
            plt.ylabel('–ö-–≤–æ –±–æ–ª—å–Ω—ã—Ö')
            plt.title('–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∫-–≤–æ –±–æ–ª—å–Ω—ã—Ö')
            plt.legend()
            st.pyplot(plt)


        st.divider()

        st.button('–°–∫–∞—á–∞—Ç—å –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –ê–Ω–∞–ª–∏–∑ –≤ PDF', type='primary', use_container_width=True)

        st.divider()
